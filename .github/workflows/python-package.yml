# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ master ]
    tags:
      - v*
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.9, '3.10', 3.11, 3.12, 3.13 ]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox-gh-actions
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Test
        run: |
          tox

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox-gh-actions
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint
        run: ruff check --output-format=github .

  typecheck:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox-gh-actions
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Type-check
        run: |
          tox -e typecheck

  i18n:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-pip-
      - name: Install gettext
        run: |
          sudo apt-get install -y gettext-base gettext
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install django
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: i18n validation
        run: |
          tox -e i18n

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.python-version }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[docs]
      - name: Build docs
        run: |
          sphinx-build -b html docs docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Install dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install coverage
      - name: Run coverage
        run: |
          source .venv/bin/activate
          export DJANGO_SETTINGS_MODULE="test_settings"
          export PYTHONPATH=.".:$PYTHONPATH"
          python -m coverage run --source=waffle `which django-admin` test waffle
          coverage report -m
          coverage html
          coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5

  release-production:
    # Only upload if a tag is pushed (otherwise just build & check)
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')

    runs-on: ubuntu-latest

    needs: [test, lint, i18n, docs, coverage]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: casperdcl/deploy-pypi@v2
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          build: true
